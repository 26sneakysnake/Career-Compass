import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from career_compass_engine import CareerCompassEngine
import networkx as nx

# Configuration de la page
st.set_page_config(
    page_title="CareerCompass - Recommandation de carri√®re par IA",
    page_icon="üß≠",
    layout="wide"
)

# Titre de l'application
st.title("üß≠ CareerCompass")
st.subheader("Syst√®me de recommandation de carri√®re interne bas√© sur l'IA")

# Initialisation du moteur de recommandation
@st.cache_resource
def load_engine():
    return CareerCompassEngine(
        employee_data_file='employee_data.csv',
        career_paths_file='career_paths.csv',
        trainings_file='trainings.csv'
    )

engine = load_engine()

# Chargement des donn√©es pour l'interface
employees = pd.read_csv('employee_data.csv')
employee_ids = employees['employee_id'].tolist()
employee_names = [f"{emp_id} - {employees[employees['employee_id'] == emp_id]['current_position'].iloc[0]}" 
                 for emp_id in employee_ids]

# Sidebar pour s√©lectionner un employ√©
st.sidebar.header("S√©lection de l'employ√©")
selected_employee = st.sidebar.selectbox(
    "Choisir un employ√©",
    options=employee_names
)
selected_id = selected_employee.split(' - ')[0]

# Ajout des nouvelles options dans la sidebar
st.sidebar.markdown("---")
st.sidebar.header("Fonctionnalit√©s suppl√©mentaires")

# Obtenir les recommandations
recommendations = engine.get_career_recommendations(selected_id)
employee = recommendations['employee']

# Section d'informations sur l'employ√©
st.header("Profil de l'employ√©")
col1, col2, col3 = st.columns(3)

with col1:
    st.info(f"**ID**: {employee['employee_id']}")
    st.info(f"**Poste actuel**: {employee['current_position']}")
    st.info(f"**Ann√©es d'exp√©rience**: {employee['years_in_position']}")

with col2:
    st.info(f"**Niveau d'√©ducation**: {employee['education_level']}")
    st.info(f"**Score de performance**: {employee['performance_score']}/5.0")

with col3:
    st.info(f"**Comp√©tences**:")
    for skill in employee['skills'].split(';'):
        st.write(f"- {skill}")

    st.info(f"**Int√©r√™ts**:")
    for interest in employee['interests'].split(';'):
        st.write(f"- {interest}")

# Section des chemins de carri√®re recommand√©s
st.header("Chemins de carri√®re recommand√©s")

if recommendations['career_paths']:
    # Cr√©er un onglet pour chaque recommandation
    tabs = st.tabs([f"{i+1}. {path['target_position']}" for i, path in enumerate(recommendations['career_paths'])])
    
    for i, tab in enumerate(tabs):
        path = recommendations['career_paths'][i]
        
        with tab:
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.subheader(f"Poste cible: {path['target_position']}")
                st.metric("Score de compatibilit√©", f"{path['compatibility_score']:.1f}%")
                
                # Graphique radar pour visualiser la correspondance
                fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
                
                # Donn√©es pour le graphique radar
                categories = ['Comp√©tences', 'Exp√©rience', 'Performance']
                values = [
                    path['skill_match'],
                    100 if path['meets_experience'] else 50,
                    100 if path['meets_performance'] else 50
                ]
                
                # Nombre de variables
                N = len(categories)
                
                # Angles pour chaque axe (divis√© √©galement)
                angles = [n / float(N) * 2 * np.pi for n in range(N)]
                angles += angles[:1]  # Fermer le polygone
                
                # Ajouter les valeurs
                values += values[:1]  # Fermer le polygone
                
                # Tracer le polygone
                ax.plot(angles, values, linewidth=2, linestyle='solid')
                ax.fill(angles, values, alpha=0.25)
                
                # Ajouter des √©tiquettes
                ax.set_xticks(angles[:-1])
                ax.set_xticklabels(categories)
                
                # Ajouter y-√©tiquettes
                ax.set_yticks([25, 50, 75, 100])
                ax.set_yticklabels(['25%', '50%', '75%', '100%'])
                
                ax.set_title("Analyse de compatibilit√©", size=14)
                st.pyplot(fig)
            
            with col2:
                st.subheader("Pr√©requis")
                st.write(f"**Ann√©es d'exp√©rience minimales**: {path['requirements']['min_years_experience']} ans")
                st.write(f"**Performance minimale**: {path['requirements']['min_performance']}/5.0")
                
                st.subheader("Comp√©tences requises")
                for skill in path['requirements']['required_skills']:
                    if skill in path['missing_skills']:
                        st.write(f"- ‚ùå {skill}")
                    else:
                        st.write(f"- ‚úÖ {skill}")
            
            # Formations recommand√©es si des comp√©tences sont manquantes
            if path['missing_skills']:
                st.subheader("Formations recommand√©es")
                
                if path['recommended_trainings']:
                    # Cr√©er un DataFrame pour afficher les formations
                    trainings_df = pd.DataFrame(path['recommended_trainings'])
                    
                    # Renommer les colonnes pour un meilleur affichage
                    trainings_df.rename(columns={
                        'training_name': 'Formation',
                        'duration_days': 'Dur√©e (jours)',
                        'level': 'Niveau',
                        'for_skill': 'Comp√©tence cibl√©e'
                    }, inplace=True)
                    
                    # Afficher le DataFrame
                    st.dataframe(trainings_df[['Formation', 'Dur√©e (jours)', 'Niveau', 'Comp√©tence cibl√©e']])
                else:
                    st.write("Aucune formation sp√©cifique n'est disponible pour les comp√©tences manquantes.")
            
            # Plan de d√©veloppement sugg√©r√©
            st.subheader("Plan de d√©veloppement sugg√©r√©")
            
            if path['missing_skills']:
                st.write("1. **Acqu√©rir les comp√©tences manquantes** via les formations recommand√©es")
                if not path['meets_experience']:
                    st.write(f"2. **Acqu√©rir {path['requirements']['min_years_experience'] - employee['years_in_position']} ann√©es d'exp√©rience suppl√©mentaires** dans le poste actuel")
                if not path['meets_performance']:
                    st.write("3. **Am√©liorer le score de performance** pour atteindre le niveau requis")
                st.write("4. **Pr√©parer une candidature interne** pour le poste cible")
            else:
                if not path['meets_experience']:
                    st.write(f"1. **Acqu√©rir {path['requirements']['min_years_experience'] - employee['years_in_position']} ann√©es d'exp√©rience suppl√©mentaires** dans le poste actuel")
                if not path['meets_performance']:
                    st.write("2. **Am√©liorer le score de performance** pour atteindre le niveau requis")
                st.write("3. **Pr√©parer une candidature interne** pour le poste cible")
                
                if path['meets_experience'] and path['meets_performance']:
                    st.success("Vous poss√©dez d√©j√† toutes les comp√©tences et pr√©requis pour ce poste! Contactez votre responsable RH pour discuter de cette opportunit√©.")
else:
    st.warning("Aucun chemin de carri√®re d√©fini pour ce poste.")

# Coach de Carri√®re IA
if st.sidebar.checkbox("Activer le Coach de Carri√®re IA"):
    st.header("üí¨ Coach de Carri√®re IA")
    question = st.selectbox(
        "Quelle question souhaitez-vous poser?",
        ["Comment me pr√©parer pour ce poste?", 
         "Quelles sont mes chances de r√©ussite?",
         "Combien de temps pour √™tre pr√™t?"]
    )
    
    if st.button("Demander au coach"):
        with st.spinner("L'IA r√©fl√©chit..."):
            import time
            time.sleep(2)  # Simule le traitement IA
            
            if question == "Comment me pr√©parer pour ce poste?":
                st.info("Bas√© sur votre profil, je recommande de vous concentrer sur les trois comp√©tences cl√©s suivantes: [liste des comp√©tences manquantes]. Pour la comp√©tence X, priorisez la formation Y qui a d√©montr√© 89% d'efficacit√© pour des profils similaires au v√¥tre.")
            elif question == "Quelles sont mes chances de r√©ussite?":
                st.info("D'apr√®s l'analyse des parcours similaires dans votre entreprise, votre profil pr√©sente un taux de r√©ussite estim√© √† 73% pour cette transition de carri√®re, ce qui est significativement au-dessus de la moyenne (61%).")
            else:
                st.info("Selon mes calculs, avec 2 formations cibl√©es et un projet transverse dans le d√©partement cible, vous pourriez atteindre le niveau requis en 7-9 mois.")

# Carte des carri√®res
if st.sidebar.button("Afficher la carte des carri√®res"):
    st.header("üó∫Ô∏è Carte des chemins de carri√®re")
    
    # Cr√©er un graphe dirig√©
    G = nx.DiGraph()
    
    # Ajouter les n≈ìuds et les ar√™tes √† partir du fichier career_paths
    career_paths = pd.read_csv('career_paths.csv')
    positions = set(career_paths['from_position'].tolist() + career_paths['to_position'].tolist())
    
    for pos in positions:
        G.add_node(pos)
    
    for _, row in career_paths.iterrows():
        G.add_edge(row['from_position'], row['to_position'])
    
    # Cr√©er la visualisation
    fig, ax = plt.subplots(figsize=(12, 8))
    pos = nx.spring_layout(G, seed=42)
    nx.draw(G, pos, with_labels=True, node_color='skyblue', node_size=2000, 
            edge_color='gray', arrows=True, ax=ax)
    st.pyplot(fig)

# Vue RH strat√©gique
if st.sidebar.checkbox("Vue RH strat√©gique"):
    st.header("üîç Impact financier et strat√©gique")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Co√ªts comparatifs")
        df_costs = pd.DataFrame({
            'Option': ['Recrutement externe', 'D√©veloppement interne (CareerCompass)'],
            'Co√ªt moyen': ['15 000 ‚Ç¨', '4 500 ‚Ç¨'],
            'Temps d\'int√©gration': ['3-6 mois', '1-2 mois'],
            'Risque d\'√©chec': ['25%', '12%']
        })
        st.table(df_costs)
    
    with col2:
        st.subheader("Impact sur la r√©tention")
        retention_data = {
            'Cat√©gorie': ['Sans programme', 'Avec CareerCompass'],
            'Taux de r√©tention √† 2 ans': [65, 83]
        }
        df_retention = pd.DataFrame(retention_data)
        
        fig, ax = plt.subplots()
        bars = ax.bar(df_retention['Cat√©gorie'], df_retention['Taux de r√©tention √† 2 ans'], color=['lightgray', 'green'])
        ax.set_ylim(0, 100)
        ax.set_ylabel('Taux de r√©tention (%)')
        ax.bar_label(bars, fmt='%d%%')
        st.pyplot(fig)

# Analyse de diversit√© et inclusion
if st.sidebar.checkbox("Analyse de diversit√© et inclusion"):
    st.header("üìä Impact sur la diversit√© et l'inclusion")
    
    # Simuler des donn√©es de diversit√©
    diversity_data = pd.DataFrame({
        'Dimension': ['Genre', 'Origine g√©ographique', '√Çge', 'Formation'],
        'Sans IA (% d\'√©cart)': [28, 35, 42, 53],
        'Avec CareerCompass (% d\'√©cart)': [12, 18, 15, 22]
    })
    
    # Afficher les donn√©es
    st.subheader("R√©duction des √©carts dans les promotions internes")
    
    # Cr√©er un graphique √† barres comparatif
    fig, ax = plt.subplots(figsize=(10, 6))
    x = range(len(diversity_data['Dimension']))
    width = 0.35
    
    ax.bar([i - width/2 for i in x], diversity_data['Sans IA (% d\'√©cart)'], width, label='Sans IA', color='lightcoral')
    ax.bar([i + width/2 for i in x], diversity_data['Avec CareerCompass (% d\'√©cart)'], width, label='Avec CareerCompass', color='lightgreen')
    
    ax.set_ylabel('√âcart en %')
    ax.set_title('R√©duction des √©carts de diversit√© dans les promotions')
    ax.set_xticks(x)
    ax.set_xticklabels(diversity_data['Dimension'])
    ax.legend()
    
    st.pyplot(fig)
    
    st.info("""
    **Comment CareerCompass am√©liore la diversit√© et l'inclusion:**
    
    - Focus sur les comp√©tences plut√¥t que sur les crit√®res subjectifs
    - D√©tection et att√©nuation des biais dans les recommandations
    - Visibilit√© accrue des opportunit√©s pour tous les employ√©s
    - Recommandations bas√©es uniquement sur les crit√®res pertinents pour le poste
    """)

# D√©tection de potentiel
if st.sidebar.checkbox("D√©tection de potentiel cach√©"):
    st.header("üíé D√©tection de potentiel inexploit√©")
    
    # Simuler les donn√©es de potentiel
    potential_data = pd.DataFrame({
        'employee_id': ['EMP001', 'EMP015', 'EMP022', 'EMP037', 'EMP049'],
        'employee_name': ['Jean Dupont', 'Marie Laurent', 'Thomas Petit', 'Sophie Martin', 'Lucas Dubois'],
        'current_position': ['D√©veloppeur Junior', 'Analyste Financier', 'Charg√© de Communication', 'Responsable RH', 'Comptable'],
        'hidden_potential': ['Leadership & Architecture', 'Strat√©gie & Business Development', 'Marketing Digital & Analytique', 'Formation & D√©veloppement', 'Finance & Data Analysis'],
        'recommendation': ['Projet transversal technique', 'Impliquer dans planification strat√©gique', 'G√©rer les r√©seaux sociaux', 'Devenir mentor interne', 'Former aux outils de BI'],
        'potential_score': [92, 87, 85, 83, 80]
    })
    
    # Afficher un tableau tri√© par score de potentiel
    st.dataframe(potential_data.sort_values('potential_score', ascending=False))
    
    st.subheader("Comment nous d√©tectons le potentiel")
    st.write("""
    Notre algorithme analyse plusieurs facteurs pour identifier les talents inexploit√©s:
    
    1. **Comp√©tences transf√©rables** qui pourraient √™tre valoris√©es dans d'autres r√¥les
    2. **Int√©r√™ts d√©clar√©s** qui ne sont pas utilis√©s dans le poste actuel
    3. **Performances exceptionnelles** dans des t√¢ches sp√©cifiques
    4. **Mod√®les de similarit√©** avec des employ√©s ayant r√©ussi des transitions de carri√®re
    
    Cette approche permet d'identifier des talents qui pourraient passer inaper√ßus dans les processus traditionnels.
    """)

# Conformit√© l√©gale et √©thique
if st.sidebar.checkbox("Conformit√© l√©gale et √©thique"):
    st.header("‚öñÔ∏è Conformit√© l√©gale et √©thique")
    
    tab1, tab2 = st.tabs(["RGPD", "AI Act"])
    
    with tab1:
        st.subheader("Conformit√© RGPD")
        st.write("""
        CareerCompass est enti√®rement conforme au RGPD:
        
        - **Consentement explicite**: Les employ√©s doivent accepter que leurs donn√©es soient utilis√©es
        - **Droit d'acc√®s**: Interface d√©di√©e pour que chaque employ√© puisse voir ses donn√©es
        - **Droit √† l'oubli**: Option de suppression des donn√©es historiques
        - **Limitation du traitement**: Utilisation des donn√©es uniquement pour les recommandations de carri√®re
        - **Minimisation des donn√©es**: Seules les donn√©es strictement n√©cessaires sont collect√©es
        - **Documentation**: Registre de traitement et analyses d'impact disponibles
        """)
        
        # Simuler un registre de traitement
        with st.expander("Voir un extrait du registre de traitement"):
            st.table(pd.DataFrame({
                'Traitement': ['Analyse des comp√©tences', 'Recommandation de carri√®re', 'Recommandation de formation'],
                'Finalit√©': ['Identifier les forces et faiblesses', 'Sugg√©rer des √©volutions de carri√®re', 'Proposer des formations adapt√©es'],
                'Base l√©gale': ['Consentement explicite', 'Consentement explicite', 'Consentement explicite'],
                'Dur√©e de conservation': ['Dur√©e du contrat + 1 an', 'Dur√©e du contrat + 1 an', 'Dur√©e du contrat + 1 an']
            }))
    
    with tab2:
        st.subheader("Conformit√© AI Act (UE)")
        st.write("""
        CareerCompass est con√ßu pour se conformer au futur AI Act europ√©en:
        
        - **Classification**: Syst√®me √† risque limit√© (Tier 2)
        - **Transparence**: Documentation technique compl√®te disponible
        - **Supervision humaine**: Validation obligatoire par un responsable RH
        - **√âvaluation des risques**: Audit r√©gulier des recommandations
        - **Registre d'IA**: Inscription au registre des syst√®mes d'IA (simul√©)
        """)
        
        # Afficher les mesures d'att√©nuation des risques
        with st.expander("Mesures d'att√©nuation des risques"):
            st.markdown("""
            - Audits r√©guliers des recommandations pour d√©tecter les biais potentiels
            - Tests continus avec diff√©rents profils pour assurer l'√©quit√©
            - Comit√© √©thique interne pour examiner les cas limites
            - Formation obligatoire des RH sur l'utilisation √©thique de l'IA
            """)

# Impact organisationnel
if st.sidebar.checkbox("Impact organisationnel"):
    st.header("üìà Impact sur la performance organisationnelle")
    
    # Donn√©es simul√©es sur l'impact
    impact_metrics = {
        'M√©trique': ['Temps moyen de pourvoi de poste', 'Co√ªt de recrutement moyen', 'Taux de r√©tention des talents cl√©s', 'Satisfaction des employ√©s', 'Performance post-promotion'],
        'Avant CareerCompass': ['62 jours', '15 000 ‚Ç¨', '67%', '3.2/5', '3.6/5'],
        'Avec CareerCompass': ['28 jours', '6 200 ‚Ç¨', '88%', '4.3/5', '4.5/5'],
        'Am√©lioration': ['55%', '59%', '31%', '34%', '25%']
    }
    
    impact_df = pd.DataFrame(impact_metrics)
    st.table(impact_df)
    
    # ROI calcul√©
    st.subheader("Retour sur investissement (ROI)")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("ROI Ann√©e 1", "+230%", "Sur investissement initial")
    
    with col2:
        st.metric("√âconomies annuelles", "450 000 ‚Ç¨", "Pour 50 recrutements")
    
    with col3:
        st.metric("Valeur employ√©s retenus", "1.2M ‚Ç¨", "√âconomie de remplacement")
    
    st.info("""
    **M√©thodologie de calcul:**
    
    Le ROI est calcul√© en consid√©rant:
    - La r√©duction des co√ªts de recrutement externe
    - La diminution du temps d'int√©gration
    - La r√©duction du turnover des talents cl√©s
    - L'augmentation de la performance post-promotion
    
    Ces facteurs sont compar√©s au co√ªt d'impl√©mentation et de maintenance du syst√®me.
    """)

# Section analytics globale
st.header("Analytics globales")

# R√©partir les employ√©s par poste
positions_count = employees['current_position'].value_counts()

# Cr√©er un graphique √† barres
fig, ax = plt.subplots(figsize=(10, 6))
positions_count.plot(kind='bar', ax=ax)
ax.set_title('R√©partition des employ√©s par poste')
ax.set_xlabel('Poste')
ax.set_ylabel('Nombre d\'employ√©s')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
st.pyplot(fig)

# Transparence de l'algorithme
if st.sidebar.checkbox("Transparence de l'algorithme"):
    st.header("üîç Comment fonctionne l'algorithme")
    st.write("""
    CareerCompass utilise un algorithme √©thique et transparent. Notre syst√®me:
    
    - **Ne consid√®re pas** les donn√©es personnelles comme l'√¢ge, le genre, l'origine ethnique
    - **Focalise sur** les comp√©tences d√©montr√©es, l'exp√©rience et les performances objectives
    - **Maintient un humain dans la boucle** pour toutes les d√©cisions finales
    - **√âquilibre l'importance** des comp√©tences techniques (50%), de l'exp√©rience (30%) et de la performance (20%)
    
    Tous les crit√®res peuvent √™tre audit√©s et ajust√©s par les √©quipes RH pour garantir l'absence de biais.
    """)

# Pied de page
st.markdown("---")
st.markdown("**CareerCompass** - D√©velopp√© dans le cadre du projet d'IA en RH")